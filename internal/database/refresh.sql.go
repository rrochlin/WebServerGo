// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRToken = `-- name: CreateRToken :one
INSERT INTO refresh_token (token, user_id)
VALUES (
	$1, $2
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRTokenParams struct {
	Token  string    `json:"token"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateRToken(ctx context.Context, arg CreateRTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRToken = `-- name: GetRToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_token
WHERE token=$1
`

func (q *Queries) GetRToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :one
UPDATE refresh_token SET revoked_at=NOW()
WHERE token=$1
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

func (q *Queries) RevokeToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
